<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "symbol.dtd">
<symbols>

    <blocks>
        <beginregex>{</beginregex>
        <endregex>}</endregex>
    </blocks>

    <symbol id="language.method" image="SymbolM" indentation="1" useforautocomplete="yes">
      <!--<regex>(\w{1,512}\s{0,512}:\s{0,512}function\([^)]{0,512}\))\s{0,512}{</regex>-->            
	   <regex>\b(([A-Za-z0-9_]{1,256})(\s{0,64}\:\s{0,64}function\s{0,64})\(([^)]{0,512})\))\s{0,256}\{</regex>
	   <postprocess>
            <find>[\n\r]</find>
            <replace> </replace>
            <find>[ \t]+</find>
            <replace> </replace>
            <find>(\s*:\s{0,64}function\s{0,64})</find>
            <replace></replace>
        </postprocess>
        <arguments>([\$A-Za-z0-9_]+)[ ,]*</arguments>
        <captures>{ "value" : "1", "name" : "2", "trim" : "3", "arguments" : "4" }</captures>
    </symbol>

    <symbol id="language.include" font-weight="normal" font-style="normal" image="Symbol#" indentation="0" ignoreblocks="yes">
		<regex>&lt;(?i)script[^&gt;]*?\stype\s*=\s*"?text/javascript"?[^&gt;]*?\ssrc="?([-:\s_\d\w\./\?]+)"?[^&gt;]*?&gt;</regex> 	    
		<regex>&lt;(?i)script[^&gt;]*?\ssrc="?([-:\s_\d\w\./\?]+)"?[^&gt;]*?\stype\s*=\s*"?text/javascript"?[^&gt;]*?&gt;</regex>    	
		<regex>&lt;(?i)script[^&gt;]*?\slanguage\s*=\s*"?javascript"?[^&gt;]*?\ssrc\s*=\s*"?([-:\s_\d\w\./\?]+)"?[^&gt;]*?&gt;</regex>    		
		<regex>&lt;(?i)script[^&gt;]*?\ssrc\s*=\s*"?([-:\s_\d\w\./\?]+)"?[^&gt;]*?\slanguage\s*=\s*"?javascript"?[^&gt;]*?&gt;</regex>
		<postprocess>
			<find>[-:\s_\d\w\./\?]*?/</find>
			<replace></replace>
		</postprocess>
	</symbol>

	<symbol id="language.function" image="SymbolF()" indentation="0" ignoreblocks="yes" useforautocomplete="yes">
       <regex>=[ \t]{0,64}function\s{1,64}((\w{1,512})[ \t\n\r]{0,512}\(([^)]{0,512})\))\s{0,256}\{</regex>
       <postprocess>
            <find>[\n\r]</find>
            <replace> </replace>
            <find>[ \t]+</find>
            <replace> </replace>
        </postprocess>
        <arguments>([\$A-Za-z0-9_]+)\s*[,]*</arguments>
        <captures>{ "value" : "1", "name" : "2", "arguments" : "3" }</captures>
    </symbol>

	<symbol id="language.function" image="SymbolF()" indentation="0" ignoreblocks="yes" useforautocomplete="yes">
       <regex>(?:[\n\r]|^)[ \t]{0,128}function\s{1,64}((\w{1,512})\s{0,64}\(([^)]{0,512})\))\s{0,256}\{</regex>
       <postprocess>
            <find>[\n\r]</find>
            <replace> </replace>
            <find>[ \t]+</find>
            <replace> </replace>
        </postprocess>
        <arguments>([\$A-Za-z0-9_]+)\s*[,]*</arguments>
        <captures>{ "value" : "1", "name" : "2", "arguments" : "3" }</captures>
    </symbol>
    
    <symbol id="language.function.inline" image="SymbolF()" indentation="0" ignoreblocks="yes" useforautocomplete="yes">
        <regex>\b(([A-Za-z0-9_]{1,256})(\s{0,64}=\s{0,64}function\s{0,64})\(([^\)]{0,512})\))\s{0,64}\{</regex>
        <!--<regex>(\w+)\s*=\s*(?i)function\s*\([^\)]*\)(?=\s*\{)</regex>-->
        <postprocess>
        	<find>[\n\r]</find>
            <replace> </replace>
            <find>[ \t]+</find>
            <replace> </replace>
            <find>(\s{0,64}=\s{0,64}function\s{0,64})</find>
            <replace></replace>
        </postprocess>
        <arguments>([\$A-Za-z0-9_]+)\s*[,]*</arguments>
        <captures>{ "value" : "1", "name" : "2", "trim" : "3", "arguments" : "4" }</captures>
    </symbol>

    <symbol id="CVS/SVN conflict" font-weight="bold" image="SymbolWarn" indentation="0" ignoreblocks="no">
        <regex>^&lt;&lt;&lt;&lt;&lt;&lt;&lt;([\n\r]|.)*?======([\n\r]|.)*?&gt;&gt;&gt;&gt;&gt;&gt;&gt;</regex>
        <postprocess>
            <find>.*</find>
            <replace>Versioning conflict!</replace>
        </postprocess>
    </symbol>

    <!-- CODA -->
    <symbol id="language.variable" ignoreblocks="yes" hidden="yes" useforautocomplete="yes">
    	<regex>(?:^|[\n\r;])\s*(?:var|const)\s+([^{;]{1,512})?(?:;|\};)</regex>
		<!--<variables>(?:(?:\A)|(?:[,]))\s*([\w\d]+)[;]*</variables>-->
		<variables>(?:^|,)\s*(?://.*[\r\n])?([\w\d]+)</variables>
        <captures>{ "variables" : "1" }</captures>
	</symbol>
 
	<symbol id="language.variable.array" ignoreblocks="yes" hidden="yes" useforautocomplete="yes">
    	<regex>(?:^|[\n\r;])\s*(?:var|const)\s+([^{;=]{1,512})=\s*\{</regex>
		<variables>([\w\d]+)</variables>
        <captures>{ "variables" : "1" }</captures>
	</symbol>
 
    <symbol id="Pragma marks" font-weight="normal" font-style="normal" image="SymbolMark" indentation="0" ignoreblocks="no" show-in-comments="yes">
        <regex>/\*\s*!(.+) \*/</regex>
    </symbol>
    
    <symbol id="Pragma marks" font-weight="normal" font-style="normal" image="SymbolMark" indentation="0" ignoreblocks="no" show-in-comments="yes">
        <regex>//[ \t]*!([^\n\r]+)</regex>
    </symbol>
	
	<symbol id="Console log" font-weight="normal" font-style="normal" image="SymbolWarn" indentation="0" ignoreblocks="no" show-in-comments="yes">
	        <regex>console\.log(\([^;]+)</regex>
	        <postprocess>
	        	<find>(^\()|(\)$)</find>
	        	<replace></replace>
	        </postprocess>
	    </symbol>
    
	    <symbol id="TODO" font-weight="normal" font-style="normal" image="Symbol!" indentation="0" ignoreblocks="no" show-in-comments="yes">
		    <regex>TODO\s([^\n]+)</regex>
	    </symbol>
	<!-- END -->

</symbols>

